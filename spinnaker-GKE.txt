Continuous Delivery Pipelines with Spinnaker and Kubernetes Engine
https://cloud.google.com/solutions/continuous-delivery-spinnaker-kubernetes-engine

Creating a CD delivery pipeline using Kubernetes engine, cloud source repositories, container builder, resource manager, and spinnaker. 

With Kubernetes Engine and Spinnaker, you can create a robust continuous delivery flow that helps to ensure your software is shipped as quickly as it is developed and validated.

Developer > container builder > spinnaker

Objectives
Set up your environment by launching Cloud Shell, creating a Kubernetes Engine cluster, and configuring your identity and user management scheme.
Download a sample application, create a Git repository, and upload it to a Cloud Source Repository.
Deploy Spinnaker to Kubernetes Engine using Helm.
Build your Docker image.
Create triggers to create Docker images when your application changes.
Configure a Spinnaker pipeline to reliably and continuously deploy your application to Kubernetes Engine.
Deploy a code change, triggering the pipeline, and watch it roll out to production.

Includes costs for k8s engine, cloud load balancer, container builder, and resource manager. 

Start a Cloud Shell instance and create a Kubernetes Engine cluster
- Open cloud shell
- cloud config set compute/zone us-central1-f
- gcloud container clusters create spinnaker-tutorial \
      --machine-type=n1-standard-2

Configure identity and access management
- gcloud iam service-accounts create  spinnaker-storage-account \
    --display-name spinnaker-storage-account
- export SA_EMAIL=$(gcloud iam service-accounts list \
    --filter="displayName:spinnaker-storage-account" \
    --format='value(email)')
export PROJECT=$(gcloud info --format='value(config.project)')
- gcloud projects add-iam-policy-binding \
    $PROJECT --role roles/storage.admin --member serviceAccount:$SA_EMAIL
- gcloud iam service-accounts keys create spinnaker-sa.json --iam-account $SA_EMAIL

Deploying Spinnaker using Helm
- wget https://storage.googleapis.com/kubernetes-helm/helm-v2.7.2-linux-amd64.tar.gz
- tar zxfv helm-v2.7.2-linux-amd64.tar.gz
- cp linux-amd64/helm .
kubectl create clusterrolebinding user-admin-binding --clusterrole=cluster-admin --user=$(gcloud config get-value account)
kubectl create serviceaccount tiller --namespace kube-system
kubectl create clusterrolebinding tiller-admin-binding --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
- kubectl create clusterrolebinding --clusterrole=cluster-admin --serviceaccount=default:default spinnaker-admin
- ./helm init --service-account=tiller
- ./helm update
- ./helm version

Configure Spinnaker
- export PROJECT=$(gcloud info \
    --format='value(config.project)')
export BUCKET=$PROJECT-spinnaker-config
gsutil mb -c regional -l us-central1 gs://$BUCKET

- export SA_JSON=$(cat spinnaker-sa.json)
export PROJECT=$(gcloud info --format='value(config.project)')
export BUCKET=$PROJECT-spinnaker-config
cat > spinnaker-config.yaml <<EOF
storageBucket: $BUCKET
gcs:
  enabled: true
  project: $PROJECT
  jsonKey: '$SA_JSON'
# Disable minio as the default
minio:
  enabled: false
# Configure your Docker registries here
accounts:
- name: gcr
  address: https://gcr.io
  username: _json_key
  password: '$SA_JSON'
  email: 1234@5678.com
EOF

Deploy the Spinnaker chart
- ./helm install -n cd stable/spinnaker -f spinnaker-config.yaml --timeout 600 \
    --version 0.3.1
- export DECK_POD=$(kubectl get pods --namespace default -l "component=deck" \
    -o jsonpath="{.items[0].metadata.name}")
kubectl port-forward --namespace default $DECK_POD 8080:9000 >> /dev/null &
- To open the Spinnaker user interface, click "Web Preview" in Cloud Shell and click "Preview on port 8080".

Building the Docker image
- wget https://gke-spinnaker.storage.googleapis.com/sample-app.tgz
- tar xzfv sample-app.tgz
- cd sample-app
- git config --global user.email "[EMAIL_ADDRESS]"
- git config --global user.name "[USERNAME]"
- git init
  git add .
  git commit -m "Initial commit"
- gcloud source repos create sample-app
  git config credential.helper gcloud.sh
- export PROJECT=$(gcloud info --format='value(config.project)')
  git remote add origin https://source.developers.google.com/p/$PROJECT/r/sample-app
- git push origin master

Configure your build triggers